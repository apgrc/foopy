
foopy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080020cc  080020cc  000120cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  2000000c  08002134  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000150  08002134  00020150  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000129ee  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027a4  00000000  00000000  00032a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006004  00000000  00000000  000351c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000880  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000af0  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004cb2  00000000  00000000  0003c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003587  00000000  00000000  000411f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044779  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018ec  00000000  00000000  000447f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020b4 	.word	0x080020b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020b4 	.word	0x080020b4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_InitTick+0x3c>)
{
 800060c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	fbb3 f3f0 	udiv	r3, r3, r0
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_InitTick+0x40>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000620:	f000 fb2e 	bl	8000c80 <HAL_SYSTICK_Config>
 8000624:	4604      	mov	r4, r0
 8000626:	b958      	cbnz	r0, 8000640 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	2d0f      	cmp	r5, #15
 800062a:	d809      	bhi.n	8000640 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	4602      	mov	r2, r0
 800062e:	4629      	mov	r1, r5
 8000630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000634:	f000 fae4 	bl	8000c00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_InitTick+0x44>)
 800063a:	4620      	mov	r0, r4
 800063c:	601d      	str	r5, [r3, #0]
 800063e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000642:	bd38      	pop	{r3, r4, r5, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x20>)
{
 8000652:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000656:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065e:	f000 fabd 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffd0 	bl	8000608 <HAL_InitTick>
  HAL_MspInit();
 8000668:	f001 fbb6 	bl	8001dd8 <HAL_MspInit>
}
 800066c:	2000      	movs	r0, #0
 800066e:	bd08      	pop	{r3, pc}
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x10>)
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_IncTick+0x14>)
 8000678:	6811      	ldr	r1, [r2, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	440b      	add	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <HAL_GetTick+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b538      	push	{r3, r4, r5, lr}
 800069a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff fff6 	bl	800068c <HAL_GetTick>
 80006a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006a4:	bf1e      	ittt	ne
 80006a6:	4b04      	ldrne	r3, [pc, #16]	; (80006b8 <HAL_Delay+0x20>)
 80006a8:	781b      	ldrbne	r3, [r3, #0]
 80006aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	4284      	cmp	r4, r0
 80006b4:	d8fa      	bhi.n	80006ac <HAL_Delay+0x14>
  {
  }
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000

080006bc <HAL_ADC_ConvCpltCallback>:
 80006bc:	4770      	bx	lr

080006be <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006be:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80006c0:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80006c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80006c8:	d11b      	bne.n	8000702 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	6892      	ldr	r2, [r2, #8]
 80006d6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80006da:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80006de:	d10c      	bne.n	80006fa <ADC_DMAConvCplt+0x3c>
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	b952      	cbnz	r2, 80006fa <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006ee:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006f0:	bf5e      	ittt	pl
 80006f2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80006f4:	f042 0201 	orrpl.w	r2, r2, #1
 80006f8:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffde 	bl	80006bc <HAL_ADC_ConvCpltCallback>
 8000700:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000702:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4718      	bx	r3

0800070c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800070c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800070e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000710:	f001 f9cc 	bl	8001aac <HAL_ADC_ConvHalfCpltCallback>
 8000714:	bd08      	pop	{r3, pc}

08000716 <HAL_ADC_ErrorCallback>:
{
 8000716:	4770      	bx	lr

08000718 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000718:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800071a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800071c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000722:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000724:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800072c:	f7ff fff3 	bl	8000716 <HAL_ADC_ErrorCallback>
 8000730:	bd08      	pop	{r3, pc}
	...

08000734 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000734:	2300      	movs	r3, #0
{ 
 8000736:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000738:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800073a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800073e:	2b01      	cmp	r3, #1
 8000740:	d074      	beq.n	800082c <HAL_ADC_ConfigChannel+0xf8>
 8000742:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000744:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000746:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800074a:	2d06      	cmp	r5, #6
 800074c:	6802      	ldr	r2, [r0, #0]
 800074e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000752:	680c      	ldr	r4, [r1, #0]
 8000754:	d825      	bhi.n	80007a2 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000756:	442b      	add	r3, r5
 8000758:	251f      	movs	r5, #31
 800075a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800075c:	3b05      	subs	r3, #5
 800075e:	409d      	lsls	r5, r3
 8000760:	ea26 0505 	bic.w	r5, r6, r5
 8000764:	fa04 f303 	lsl.w	r3, r4, r3
 8000768:	432b      	orrs	r3, r5
 800076a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800076c:	2c09      	cmp	r4, #9
 800076e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000772:	688d      	ldr	r5, [r1, #8]
 8000774:	d92f      	bls.n	80007d6 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000776:	2607      	movs	r6, #7
 8000778:	4423      	add	r3, r4
 800077a:	68d1      	ldr	r1, [r2, #12]
 800077c:	3b1e      	subs	r3, #30
 800077e:	409e      	lsls	r6, r3
 8000780:	ea21 0106 	bic.w	r1, r1, r6
 8000784:	fa05 f303 	lsl.w	r3, r5, r3
 8000788:	430b      	orrs	r3, r1
 800078a:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800078c:	f1a4 0310 	sub.w	r3, r4, #16
 8000790:	2b01      	cmp	r3, #1
 8000792:	d92b      	bls.n	80007ec <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000794:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000796:	2200      	movs	r2, #0
 8000798:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 800079c:	4618      	mov	r0, r3
 800079e:	b002      	add	sp, #8
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80007a2:	2d0c      	cmp	r5, #12
 80007a4:	d80b      	bhi.n	80007be <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007a6:	442b      	add	r3, r5
 80007a8:	251f      	movs	r5, #31
 80007aa:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80007ac:	3b23      	subs	r3, #35	; 0x23
 80007ae:	409d      	lsls	r5, r3
 80007b0:	ea26 0505 	bic.w	r5, r6, r5
 80007b4:	fa04 f303 	lsl.w	r3, r4, r3
 80007b8:	432b      	orrs	r3, r5
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
 80007bc:	e7d6      	b.n	800076c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007be:	442b      	add	r3, r5
 80007c0:	251f      	movs	r5, #31
 80007c2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80007c4:	3b41      	subs	r3, #65	; 0x41
 80007c6:	409d      	lsls	r5, r3
 80007c8:	ea26 0505 	bic.w	r5, r6, r5
 80007cc:	fa04 f303 	lsl.w	r3, r4, r3
 80007d0:	432b      	orrs	r3, r5
 80007d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d4:	e7ca      	b.n	800076c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007d6:	2607      	movs	r6, #7
 80007d8:	6911      	ldr	r1, [r2, #16]
 80007da:	4423      	add	r3, r4
 80007dc:	409e      	lsls	r6, r3
 80007de:	ea21 0106 	bic.w	r1, r1, r6
 80007e2:	fa05 f303 	lsl.w	r3, r5, r3
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6113      	str	r3, [r2, #16]
 80007ea:	e7cf      	b.n	800078c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_ADC_ConfigChannel+0xfc>)
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d116      	bne.n	8000820 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80007f2:	6893      	ldr	r3, [r2, #8]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	d4cd      	bmi.n	8000794 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007f8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007fa:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000800:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000802:	d1c7      	bne.n	8000794 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_ADC_ConfigChannel+0x100>)
 8000806:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_ADC_ConfigChannel+0x104>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	fbb3 f2f2 	udiv	r2, r3, r2
 800080e:	230a      	movs	r3, #10
 8000810:	4353      	muls	r3, r2
            wait_loop_index--;
 8000812:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000814:	9b01      	ldr	r3, [sp, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0bc      	beq.n	8000794 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800081a:	9b01      	ldr	r3, [sp, #4]
 800081c:	3b01      	subs	r3, #1
 800081e:	e7f8      	b.n	8000812 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000820:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000822:	f043 0320 	orr.w	r3, r3, #32
 8000826:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	e7b4      	b.n	8000796 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800082c:	2302      	movs	r3, #2
 800082e:	e7b5      	b.n	800079c <HAL_ADC_ConfigChannel+0x68>
 8000830:	40012400 	.word	0x40012400
 8000834:	20000008 	.word	0x20000008
 8000838:	000f4240 	.word	0x000f4240

0800083c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800083c:	2300      	movs	r3, #0
{
 800083e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000840:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000842:	6803      	ldr	r3, [r0, #0]
{
 8000844:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000846:	689a      	ldr	r2, [r3, #8]
 8000848:	07d2      	lsls	r2, r2, #31
 800084a:	d502      	bpl.n	8000852 <ADC_Enable+0x16>
  return HAL_OK;
 800084c:	2000      	movs	r0, #0
}
 800084e:	b002      	add	sp, #8
 8000850:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	f042 0201 	orr.w	r2, r2, #1
 8000858:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <ADC_Enable+0x68>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <ADC_Enable+0x6c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000864:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	b9c3      	cbnz	r3, 800089c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800086a:	f7ff ff0f 	bl	800068c <HAL_GetTick>
 800086e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	689d      	ldr	r5, [r3, #8]
 8000874:	f015 0501 	ands.w	r5, r5, #1
 8000878:	d1e8      	bne.n	800084c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800087a:	f7ff ff07 	bl	800068c <HAL_GetTick>
 800087e:	1b80      	subs	r0, r0, r6
 8000880:	2802      	cmp	r0, #2
 8000882:	d9f5      	bls.n	8000870 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000886:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000892:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800089a:	e7d8      	b.n	800084e <ADC_Enable+0x12>
      wait_loop_index--;
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	e7e0      	b.n	8000864 <ADC_Enable+0x28>
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	000f4240 	.word	0x000f4240

080008ac <HAL_ADC_Start_DMA>:
{
 80008ac:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80008b0:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008b2:	4b40      	ldr	r3, [pc, #256]	; (80009b4 <HAL_ADC_Start_DMA+0x108>)
 80008b4:	6802      	ldr	r2, [r0, #0]
{
 80008b6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008b8:	429a      	cmp	r2, r3
{
 80008ba:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008bc:	d002      	beq.n	80008c4 <HAL_ADC_Start_DMA+0x18>
 80008be:	493e      	ldr	r1, [pc, #248]	; (80009b8 <HAL_ADC_Start_DMA+0x10c>)
 80008c0:	428a      	cmp	r2, r1
 80008c2:	d103      	bne.n	80008cc <HAL_ADC_Start_DMA+0x20>
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80008ca:	d16e      	bne.n	80009aa <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80008cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d06c      	beq.n	80009ae <HAL_ADC_Start_DMA+0x102>
 80008d4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80008d6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80008d8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80008dc:	f7ff ffae 	bl	800083c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80008e0:	4606      	mov	r6, r0
 80008e2:	2800      	cmp	r0, #0
 80008e4:	d15d      	bne.n	80009a2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80008e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008e8:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80008ea:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80008f0:	f020 0001 	bic.w	r0, r0, #1
 80008f4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008f8:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80008fa:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008fc:	d104      	bne.n	8000908 <HAL_ADC_Start_DMA+0x5c>
 80008fe:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <HAL_ADC_Start_DMA+0x108>)
 8000900:	6853      	ldr	r3, [r2, #4]
 8000902:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000906:	d13e      	bne.n	8000986 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800090a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800090e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000910:	684b      	ldr	r3, [r1, #4]
 8000912:	055a      	lsls	r2, r3, #21
 8000914:	d505      	bpl.n	8000922 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000924:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000926:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800092a:	bf18      	it	ne
 800092c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800092e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000930:	bf18      	it	ne
 8000932:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000936:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000938:	2300      	movs	r3, #0
 800093a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000940:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000942:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_ADC_Start_DMA+0x114>)
 8000946:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_ADC_Start_DMA+0x118>)
 800094a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800094c:	f06f 0302 	mvn.w	r3, #2
 8000950:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000954:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000960:	4643      	mov	r3, r8
 8000962:	f000 f9e9 	bl	8000d38 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800096e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	bf0c      	ite	eq
 8000976:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800097a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800097e:	609a      	str	r2, [r3, #8]
}
 8000980:	4630      	mov	r0, r6
 8000982:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800098c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098e:	6853      	ldr	r3, [r2, #4]
 8000990:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000992:	bf41      	itttt	mi
 8000994:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000996:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800099a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800099e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80009a0:	e7bf      	b.n	8000922 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80009a2:	2300      	movs	r3, #0
 80009a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80009a8:	e7ea      	b.n	8000980 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80009aa:	2601      	movs	r6, #1
 80009ac:	e7e8      	b.n	8000980 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80009ae:	2602      	movs	r6, #2
 80009b0:	e7e6      	b.n	8000980 <HAL_ADC_Start_DMA+0xd4>
 80009b2:	bf00      	nop
 80009b4:	40012400 	.word	0x40012400
 80009b8:	40012800 	.word	0x40012800
 80009bc:	080006bf 	.word	0x080006bf
 80009c0:	0800070d 	.word	0x0800070d
 80009c4:	08000719 	.word	0x08000719

080009c8 <ADC_ConversionStop_Disable>:
{
 80009c8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009ca:	6803      	ldr	r3, [r0, #0]
{
 80009cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	07d2      	lsls	r2, r2, #31
 80009d2:	d401      	bmi.n	80009d8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	f022 0201 	bic.w	r2, r2, #1
 80009de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80009e0:	f7ff fe54 	bl	800068c <HAL_GetTick>
 80009e4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	07db      	lsls	r3, r3, #31
 80009ec:	d5f2      	bpl.n	80009d4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009ee:	f7ff fe4d 	bl	800068c <HAL_GetTick>
 80009f2:	1b40      	subs	r0, r0, r5
 80009f4:	2802      	cmp	r0, #2
 80009f6:	d9f6      	bls.n	80009e6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009fa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}

08000a0c <HAL_ADC_Init>:
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000a0e:	4604      	mov	r4, r0
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d071      	beq.n	8000af8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a16:	b923      	cbnz	r3, 8000a22 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a18:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a1e:	f001 fa2b 	bl	8001e78 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff ffd0 	bl	80009c8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a2a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a30:	d164      	bne.n	8000afc <HAL_ADC_Init+0xf0>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d162      	bne.n	8000afc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a36:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000a38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a3c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000a3e:	f023 0302 	bic.w	r3, r3, #2
 8000a42:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a46:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a48:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000a4a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000a4c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000a52:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a56:	d038      	beq.n	8000aca <HAL_ADC_Init+0xbe>
 8000a58:	2901      	cmp	r1, #1
 8000a5a:	bf14      	ite	ne
 8000a5c:	4606      	movne	r6, r0
 8000a5e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a62:	6965      	ldr	r5, [r4, #20]
 8000a64:	2d01      	cmp	r5, #1
 8000a66:	d107      	bne.n	8000a78 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d130      	bne.n	8000ace <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a6c:	69a3      	ldr	r3, [r4, #24]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000a74:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000a78:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a7a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000a7e:	685d      	ldr	r5, [r3, #4]
 8000a80:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000a84:	ea45 0506 	orr.w	r5, r5, r6
 8000a88:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a8a:	689e      	ldr	r6, [r3, #8]
 8000a8c:	4d1d      	ldr	r5, [pc, #116]	; (8000b04 <HAL_ADC_Init+0xf8>)
 8000a8e:	ea05 0506 	and.w	r5, r5, r6
 8000a92:	ea45 0502 	orr.w	r5, r5, r2
 8000a96:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_Init+0x92>
 8000a9a:	2901      	cmp	r1, #1
 8000a9c:	d120      	bne.n	8000ae0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a9e:	6921      	ldr	r1, [r4, #16]
 8000aa0:	3901      	subs	r1, #1
 8000aa2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000aa4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000aa6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000aaa:	4329      	orrs	r1, r5
 8000aac:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aae:	6899      	ldr	r1, [r3, #8]
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_ADC_Init+0xfc>)
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d115      	bne.n	8000ae4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000abe:	f023 0303 	bic.w	r3, r3, #3
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aca:	460e      	mov	r6, r1
 8000acc:	e7c9      	b.n	8000a62 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ade:	e7cb      	b.n	8000a78 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	e7df      	b.n	8000aa4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ae6:	f023 0312 	bic.w	r3, r3, #18
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1
}
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b02:	e7f9      	b.n	8000af8 <HAL_ADC_Init+0xec>
 8000b04:	ffe1f7fd 	.word	0xffe1f7fd
 8000b08:	ff1f0efe 	.word	0xff1f0efe

08000b0c <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000b0c:	2300      	movs	r3, #0
{
 8000b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b10:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b12:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000b16:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d05a      	beq.n	8000bd2 <HAL_ADCEx_Calibration_Start+0xc6>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b22:	f7ff ff51 	bl	80009c8 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b26:	4605      	mov	r5, r0
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d132      	bne.n	8000b92 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b2e:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000b30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b34:	f023 0302 	bic.w	r3, r3, #2
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000b40:	681e      	ldr	r6, [r3, #0]
 8000b42:	f000 fda5 	bl	8001690 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b46:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000b4a:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000b4c:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000b4e:	9b01      	ldr	r3, [sp, #4]
 8000b50:	bb1b      	cbnz	r3, 8000b9a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff fe72 	bl	800083c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	6893      	ldr	r3, [r2, #8]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000b62:	f7ff fd93 	bl	800068c <HAL_GetTick>
 8000b66:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	0712      	lsls	r2, r2, #28
 8000b6e:	d418      	bmi.n	8000ba2 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	f042 0204 	orr.w	r2, r2, #4
 8000b76:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b78:	f7ff fd88 	bl	800068c <HAL_GetTick>
 8000b7c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	d41f      	bmi.n	8000bc6 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b88:	f023 0303 	bic.w	r3, r3, #3
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b92:	2300      	movs	r3, #0
 8000b94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b98:	e012      	b.n	8000bc0 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000b9a:	9b01      	ldr	r3, [sp, #4]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	e7d5      	b.n	8000b4e <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000ba2:	f7ff fd73 	bl	800068c <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	280a      	cmp	r0, #10
 8000baa:	d9dd      	bls.n	8000b68 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000bae:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	f023 0312 	bic.w	r3, r3, #18
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000bc6:	f7ff fd61 	bl	800068c <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	280a      	cmp	r0, #10
 8000bce:	d9d6      	bls.n	8000b7e <HAL_ADCEx_Calibration_Start+0x72>
 8000bd0:	e7ec      	b.n	8000bac <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000bd2:	2502      	movs	r5, #2
 8000bd4:	e7f4      	b.n	8000bc0 <HAL_ADCEx_Calibration_Start+0xb4>
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bde:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000be2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bea:	041b      	lsls	r3, r3, #16
 8000bec:	0c1b      	lsrs	r3, r3, #16
 8000bee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000bf6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bf8:	60d3      	str	r3, [r2, #12]
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b530      	push	{r4, r5, lr}
 8000c04:	68dc      	ldr	r4, [r3, #12]
 8000c06:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	bf28      	it	cs
 8000c14:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	bf98      	it	ls
 8000c1e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	fa05 f303 	lsl.w	r3, r5, r3
 8000c24:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c28:	bf88      	it	hi
 8000c2a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4019      	ands	r1, r3
 8000c2e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	fa05 f404 	lsl.w	r4, r5, r4
 8000c34:	3c01      	subs	r4, #1
 8000c36:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c38:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3a:	ea42 0201 	orr.w	r2, r2, r1
 8000c3e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	bfaf      	iteee	ge
 8000c44:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	4b06      	ldrlt	r3, [pc, #24]	; (8000c64 <HAL_NVIC_SetPriority+0x64>)
 8000c4a:	f000 000f 	andlt.w	r0, r0, #15
 8000c4e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	bfa5      	ittet	ge
 8000c52:	b2d2      	uxtbge	r2, r2
 8000c54:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c5e:	bd30      	pop	{r4, r5, pc}
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	e000ed14 	.word	0xe000ed14

08000c68 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c68:	2301      	movs	r3, #1
 8000c6a:	0942      	lsrs	r2, r0, #5
 8000c6c:	f000 001f 	and.w	r0, r0, #31
 8000c70:	fa03 f000 	lsl.w	r0, r3, r0
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <HAL_NVIC_EnableIRQ+0x14>)
 8000c76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	3801      	subs	r0, #1
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d20a      	bcs.n	8000c9e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	bf0c      	ite	eq
 8000cb4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cb8:	f022 0204 	bicne.w	r2, r2, #4
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_SYSTICK_IRQHandler>:
{
 8000cc6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cc8:	f7ff fffc 	bl	8000cc4 <HAL_SYSTICK_Callback>
 8000ccc:	bd08      	pop	{r3, pc}
	...

08000cd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cd2:	b350      	cbz	r0, 8000d2a <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cd4:	2214      	movs	r2, #20
 8000cd6:	6801      	ldr	r1, [r0, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cda:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cdc:	440b      	add	r3, r1
 8000cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000ce8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000cea:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000cec:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000cf2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfa:	4323      	orrs	r3, r4
 8000cfc:	6904      	ldr	r4, [r0, #16]
 8000cfe:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d00:	6944      	ldr	r4, [r0, #20]
 8000d02:	4323      	orrs	r3, r4
 8000d04:	6984      	ldr	r4, [r0, #24]
 8000d06:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d08:	69c4      	ldr	r4, [r0, #28]
 8000d0a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000d0c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d0e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d10:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000d12:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d14:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8000d18:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000d1a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000d1c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000d1e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d20:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d22:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	bf00      	nop
 8000d30:	bffdfff8 	.word	0xbffdfff8
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d3a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000d3e:	2c01      	cmp	r4, #1
 8000d40:	d035      	beq.n	8000dae <HAL_DMA_Start_IT+0x76>
 8000d42:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d44:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000d48:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f04f 0600 	mov.w	r6, #0
 8000d52:	f04f 0402 	mov.w	r4, #2
 8000d56:	d128      	bne.n	8000daa <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d58:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d5c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000d60:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d62:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000d64:	f026 0601 	bic.w	r6, r6, #1
 8000d68:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d6a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000d6c:	40bd      	lsls	r5, r7
 8000d6e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d70:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d72:	6843      	ldr	r3, [r0, #4]
 8000d74:	6805      	ldr	r5, [r0, #0]
 8000d76:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000d78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d7a:	bf0b      	itete	eq
 8000d7c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000d7e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000d80:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000d82:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000d84:	b14b      	cbz	r3, 8000d9a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d8c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000d8e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d90:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	602b      	str	r3, [r5, #0]
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	f043 030a 	orr.w	r3, r3, #10
 8000da8:	e7f0      	b.n	8000d8c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000daa:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000dae:	2002      	movs	r0, #2
}
 8000db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000db4 <HAL_DMA_IRQHandler>:
{
 8000db4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000db8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dba:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dbc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000dbe:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000dc4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dc6:	d032      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x7a>
 8000dc8:	074d      	lsls	r5, r1, #29
 8000dca:	d530      	bpl.n	8000e2e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dd0:	bf5e      	ittt	pl
 8000dd2:	681a      	ldrpl	r2, [r3, #0]
 8000dd4:	f022 0204 	bicpl.w	r2, r2, #4
 8000dd8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_DMA_IRQHandler+0x120>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d019      	beq.n	8000e14 <HAL_DMA_IRQHandler+0x60>
 8000de0:	3214      	adds	r2, #20
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d018      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x64>
 8000de6:	3214      	adds	r2, #20
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d017      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x68>
 8000dec:	3214      	adds	r2, #20
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d017      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x6e>
 8000df2:	3214      	adds	r2, #20
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d017      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x74>
 8000df8:	3214      	adds	r2, #20
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	bf0c      	ite	eq
 8000dfe:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000e02:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000e06:	4a34      	ldr	r2, [pc, #208]	; (8000ed8 <HAL_DMA_IRQHandler+0x124>)
 8000e08:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000e0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d05e      	beq.n	8000ece <HAL_DMA_IRQHandler+0x11a>
}
 8000e10:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000e12:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e14:	2304      	movs	r3, #4
 8000e16:	e7f6      	b.n	8000e06 <HAL_DMA_IRQHandler+0x52>
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	e7f4      	b.n	8000e06 <HAL_DMA_IRQHandler+0x52>
 8000e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e20:	e7f1      	b.n	8000e06 <HAL_DMA_IRQHandler+0x52>
 8000e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e26:	e7ee      	b.n	8000e06 <HAL_DMA_IRQHandler+0x52>
 8000e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e2c:	e7eb      	b.n	8000e06 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e2e:	2502      	movs	r5, #2
 8000e30:	4095      	lsls	r5, r2
 8000e32:	4225      	tst	r5, r4
 8000e34:	d035      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xee>
 8000e36:	078d      	lsls	r5, r1, #30
 8000e38:	d533      	bpl.n	8000ea2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	0694      	lsls	r4, r2, #26
 8000e3e:	d406      	bmi.n	8000e4e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f022 020a 	bic.w	r2, r2, #10
 8000e46:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_DMA_IRQHandler+0x120>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d019      	beq.n	8000e88 <HAL_DMA_IRQHandler+0xd4>
 8000e54:	3214      	adds	r2, #20
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d018      	beq.n	8000e8c <HAL_DMA_IRQHandler+0xd8>
 8000e5a:	3214      	adds	r2, #20
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d017      	beq.n	8000e90 <HAL_DMA_IRQHandler+0xdc>
 8000e60:	3214      	adds	r2, #20
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d017      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xe2>
 8000e66:	3214      	adds	r2, #20
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d017      	beq.n	8000e9c <HAL_DMA_IRQHandler+0xe8>
 8000e6c:	3214      	adds	r2, #20
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	bf0c      	ite	eq
 8000e72:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000e76:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_DMA_IRQHandler+0x124>)
 8000e7c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000e84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e86:	e7c1      	b.n	8000e0c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e7f6      	b.n	8000e7a <HAL_DMA_IRQHandler+0xc6>
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	e7f4      	b.n	8000e7a <HAL_DMA_IRQHandler+0xc6>
 8000e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e94:	e7f1      	b.n	8000e7a <HAL_DMA_IRQHandler+0xc6>
 8000e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9a:	e7ee      	b.n	8000e7a <HAL_DMA_IRQHandler+0xc6>
 8000e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea0:	e7eb      	b.n	8000e7a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ea2:	2508      	movs	r5, #8
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	4225      	tst	r5, r4
 8000ea8:	d011      	beq.n	8000ece <HAL_DMA_IRQHandler+0x11a>
 8000eaa:	0709      	lsls	r1, r1, #28
 8000eac:	d50f      	bpl.n	8000ece <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	f021 010e 	bic.w	r1, r1, #14
 8000eb4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	fa03 f202 	lsl.w	r2, r3, r2
 8000ebc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ebe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000ec0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ecc:	e79e      	b.n	8000e0c <HAL_DMA_IRQHandler+0x58>
}
 8000ece:	bc70      	pop	{r4, r5, r6}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40020008 	.word	0x40020008
 8000ed8:	40020000 	.word	0x40020000

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ee0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	4616      	mov	r6, r2
 8000ee4:	4b65      	ldr	r3, [pc, #404]	; (800107c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ee6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800108c <HAL_GPIO_Init+0x1b0>
 8000eea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001090 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000eee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ef4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d17f      	bne.n	8001000 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f00:	684d      	ldr	r5, [r1, #4]
 8000f02:	2d12      	cmp	r5, #18
 8000f04:	f000 80af 	beq.w	8001066 <HAL_GPIO_Init+0x18a>
 8000f08:	f200 8088 	bhi.w	800101c <HAL_GPIO_Init+0x140>
 8000f0c:	2d02      	cmp	r5, #2
 8000f0e:	f000 80a7 	beq.w	8001060 <HAL_GPIO_Init+0x184>
 8000f12:	d87c      	bhi.n	800100e <HAL_GPIO_Init+0x132>
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	f000 808e 	beq.w	8001036 <HAL_GPIO_Init+0x15a>
 8000f1a:	2d01      	cmp	r5, #1
 8000f1c:	f000 809e 	beq.w	800105c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f20:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f24:	2cff      	cmp	r4, #255	; 0xff
 8000f26:	bf93      	iteet	ls
 8000f28:	4682      	movls	sl, r0
 8000f2a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f2e:	3d08      	subhi	r5, #8
 8000f30:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f34:	bf92      	itee	ls
 8000f36:	00b5      	lslls	r5, r6, #2
 8000f38:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f3c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f3e:	fa09 f805 	lsl.w	r8, r9, r5
 8000f42:	ea2b 0808 	bic.w	r8, fp, r8
 8000f46:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f4a:	bf88      	it	hi
 8000f4c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f50:	ea48 0505 	orr.w	r5, r8, r5
 8000f54:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f58:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f5c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f60:	d04e      	beq.n	8001000 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4d47      	ldr	r5, [pc, #284]	; (8001080 <HAL_GPIO_Init+0x1a4>)
 8000f64:	4f46      	ldr	r7, [pc, #280]	; (8001080 <HAL_GPIO_Init+0x1a4>)
 8000f66:	69ad      	ldr	r5, [r5, #24]
 8000f68:	f026 0803 	bic.w	r8, r6, #3
 8000f6c:	f045 0501 	orr.w	r5, r5, #1
 8000f70:	61bd      	str	r5, [r7, #24]
 8000f72:	69bd      	ldr	r5, [r7, #24]
 8000f74:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f78:	f005 0501 	and.w	r5, r5, #1
 8000f7c:	9501      	str	r5, [sp, #4]
 8000f7e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f82:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f88:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000f8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f90:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f94:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f98:	4d3a      	ldr	r5, [pc, #232]	; (8001084 <HAL_GPIO_Init+0x1a8>)
 8000f9a:	42a8      	cmp	r0, r5
 8000f9c:	d068      	beq.n	8001070 <HAL_GPIO_Init+0x194>
 8000f9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa2:	42a8      	cmp	r0, r5
 8000fa4:	d066      	beq.n	8001074 <HAL_GPIO_Init+0x198>
 8000fa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000faa:	42a8      	cmp	r0, r5
 8000fac:	d064      	beq.n	8001078 <HAL_GPIO_Init+0x19c>
 8000fae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fb2:	42a8      	cmp	r0, r5
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2503      	moveq	r5, #3
 8000fb8:	2504      	movne	r5, #4
 8000fba:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fbe:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000fc2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	bf14      	ite	ne
 8000fce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd0:	43a5      	biceq	r5, r4
 8000fd2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fd4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000fda:	bf14      	ite	ne
 8000fdc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fde:	43a5      	biceq	r5, r4
 8000fe0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe8:	bf14      	ite	ne
 8000fea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fec:	43a5      	biceq	r5, r4
 8000fee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff6:	bf14      	ite	ne
 8000ff8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffa:	ea25 0404 	biceq.w	r4, r5, r4
 8000ffe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001000:	3601      	adds	r6, #1
 8001002:	2e10      	cmp	r6, #16
 8001004:	f47f af73 	bne.w	8000eee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001008:	b003      	add	sp, #12
 800100a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800100e:	2d03      	cmp	r5, #3
 8001010:	d022      	beq.n	8001058 <HAL_GPIO_Init+0x17c>
 8001012:	2d11      	cmp	r5, #17
 8001014:	d184      	bne.n	8000f20 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001016:	68ca      	ldr	r2, [r1, #12]
 8001018:	3204      	adds	r2, #4
          break;
 800101a:	e781      	b.n	8000f20 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800101c:	4f1a      	ldr	r7, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x1ac>)
 800101e:	42bd      	cmp	r5, r7
 8001020:	d009      	beq.n	8001036 <HAL_GPIO_Init+0x15a>
 8001022:	d812      	bhi.n	800104a <HAL_GPIO_Init+0x16e>
 8001024:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001094 <HAL_GPIO_Init+0x1b8>
 8001028:	454d      	cmp	r5, r9
 800102a:	d004      	beq.n	8001036 <HAL_GPIO_Init+0x15a>
 800102c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001030:	454d      	cmp	r5, r9
 8001032:	f47f af75 	bne.w	8000f20 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	688a      	ldr	r2, [r1, #8]
 8001038:	b1c2      	cbz	r2, 800106c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800103a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800103c:	bf0c      	ite	eq
 800103e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001042:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001046:	2208      	movs	r2, #8
 8001048:	e76a      	b.n	8000f20 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800104a:	4575      	cmp	r5, lr
 800104c:	d0f3      	beq.n	8001036 <HAL_GPIO_Init+0x15a>
 800104e:	4565      	cmp	r5, ip
 8001050:	d0f1      	beq.n	8001036 <HAL_GPIO_Init+0x15a>
 8001052:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001098 <HAL_GPIO_Init+0x1bc>
 8001056:	e7eb      	b.n	8001030 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001058:	2200      	movs	r2, #0
 800105a:	e761      	b.n	8000f20 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800105c:	68ca      	ldr	r2, [r1, #12]
          break;
 800105e:	e75f      	b.n	8000f20 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001060:	68ca      	ldr	r2, [r1, #12]
 8001062:	3208      	adds	r2, #8
          break;
 8001064:	e75c      	b.n	8000f20 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001066:	68ca      	ldr	r2, [r1, #12]
 8001068:	320c      	adds	r2, #12
          break;
 800106a:	e759      	b.n	8000f20 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106c:	2204      	movs	r2, #4
 800106e:	e757      	b.n	8000f20 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001070:	2500      	movs	r5, #0
 8001072:	e7a2      	b.n	8000fba <HAL_GPIO_Init+0xde>
 8001074:	2501      	movs	r5, #1
 8001076:	e7a0      	b.n	8000fba <HAL_GPIO_Init+0xde>
 8001078:	2502      	movs	r5, #2
 800107a:	e79e      	b.n	8000fba <HAL_GPIO_Init+0xde>
 800107c:	40010400 	.word	0x40010400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800
 8001088:	10210000 	.word	0x10210000
 800108c:	10310000 	.word	0x10310000
 8001090:	10320000 	.word	0x10320000
 8001094:	10110000 	.word	0x10110000
 8001098:	10220000 	.word	0x10220000

0800109c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109c:	6803      	ldr	r3, [r0, #0]
{
 800109e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	07db      	lsls	r3, r3, #31
{
 80010a4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	d410      	bmi.n	80010ca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	079f      	lsls	r7, r3, #30
 80010ac:	d45e      	bmi.n	800116c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	0719      	lsls	r1, r3, #28
 80010b2:	f100 8095 	bmi.w	80011e0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	f100 80bf 	bmi.w	800123c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010be:	69ea      	ldr	r2, [r5, #28]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	f040 812d 	bne.w	8001320 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010c6:	2000      	movs	r0, #0
 80010c8:	e014      	b.n	80010f4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ca:	4c90      	ldr	r4, [pc, #576]	; (800130c <HAL_RCC_OscConfig+0x270>)
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d007      	beq.n	80010e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d10c      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	03de      	lsls	r6, r3, #15
 80010e4:	d509      	bpl.n	80010fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	039c      	lsls	r4, r3, #14
 80010ea:	d5dd      	bpl.n	80010a8 <HAL_RCC_OscConfig+0xc>
 80010ec:	686b      	ldr	r3, [r5, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1da      	bne.n	80010a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	b002      	add	sp, #8
 80010f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	686b      	ldr	r3, [r5, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d110      	bne.n	8001124 <HAL_RCC_OscConfig+0x88>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800110a:	f7ff fabf 	bl	800068c <HAL_GetTick>
 800110e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	0398      	lsls	r0, r3, #14
 8001114:	d4c8      	bmi.n	80010a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001116:	f7ff fab9 	bl	800068c <HAL_GetTick>
 800111a:	1b80      	subs	r0, r0, r6
 800111c:	2864      	cmp	r0, #100	; 0x64
 800111e:	d9f7      	bls.n	8001110 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001120:	2003      	movs	r0, #3
 8001122:	e7e7      	b.n	80010f4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	b99b      	cbnz	r3, 800114e <HAL_RCC_OscConfig+0xb2>
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001136:	f7ff faa9 	bl	800068c <HAL_GetTick>
 800113a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	0399      	lsls	r1, r3, #14
 8001140:	d5b2      	bpl.n	80010a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001142:	f7ff faa3 	bl	800068c <HAL_GetTick>
 8001146:	1b80      	subs	r0, r0, r6
 8001148:	2864      	cmp	r0, #100	; 0x64
 800114a:	d9f7      	bls.n	800113c <HAL_RCC_OscConfig+0xa0>
 800114c:	e7e8      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	d103      	bne.n	800115e <HAL_RCC_OscConfig+0xc2>
 8001156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115a:	6023      	str	r3, [r4, #0]
 800115c:	e7d1      	b.n	8001102 <HAL_RCC_OscConfig+0x66>
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	e7cd      	b.n	8001108 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116c:	4c67      	ldr	r4, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x270>)
 800116e:	6863      	ldr	r3, [r4, #4]
 8001170:	f013 0f0c 	tst.w	r3, #12
 8001174:	d007      	beq.n	8001186 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001176:	6863      	ldr	r3, [r4, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d110      	bne.n	80011a2 <HAL_RCC_OscConfig+0x106>
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	03da      	lsls	r2, r3, #15
 8001184:	d40d      	bmi.n	80011a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	079b      	lsls	r3, r3, #30
 800118a:	d502      	bpl.n	8001192 <HAL_RCC_OscConfig+0xf6>
 800118c:	692b      	ldr	r3, [r5, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d1af      	bne.n	80010f2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	696a      	ldr	r2, [r5, #20]
 8001196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800119a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800119e:	6023      	str	r3, [r4, #0]
 80011a0:	e785      	b.n	80010ae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a2:	692a      	ldr	r2, [r5, #16]
 80011a4:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80011a6:	b16a      	cbz	r2, 80011c4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011ac:	f7ff fa6e 	bl	800068c <HAL_GetTick>
 80011b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	079f      	lsls	r7, r3, #30
 80011b6:	d4ec      	bmi.n	8001192 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fa68 	bl	800068c <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9f7      	bls.n	80011b2 <HAL_RCC_OscConfig+0x116>
 80011c2:	e7ad      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80011c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa61 	bl	800068c <HAL_GetTick>
 80011ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	0798      	lsls	r0, r3, #30
 80011d0:	f57f af6d 	bpl.w	80010ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fa5a 	bl	800068c <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x130>
 80011de:	e79f      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	69aa      	ldr	r2, [r5, #24]
 80011e2:	4c4a      	ldr	r4, [pc, #296]	; (800130c <HAL_RCC_OscConfig+0x270>)
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_RCC_OscConfig+0x278>)
 80011e6:	b1da      	cbz	r2, 8001220 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa4e 	bl	800068c <HAL_GetTick>
 80011f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f4:	079b      	lsls	r3, r3, #30
 80011f6:	d50d      	bpl.n	8001214 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x27c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	fbb3 f3f2 	udiv	r3, r3, r2
 8001204:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001206:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001208:	9b01      	ldr	r3, [sp, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f9      	bne.n	8001206 <HAL_RCC_OscConfig+0x16a>
 8001212:	e750      	b.n	80010b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fa3a 	bl	800068c <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	2802      	cmp	r0, #2
 800121c:	d9e9      	bls.n	80011f2 <HAL_RCC_OscConfig+0x156>
 800121e:	e77f      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001220:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001222:	f7ff fa33 	bl	800068c <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800122a:	079f      	lsls	r7, r3, #30
 800122c:	f57f af43 	bpl.w	80010b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fa2c 	bl	800068c <HAL_GetTick>
 8001234:	1b80      	subs	r0, r0, r6
 8001236:	2802      	cmp	r0, #2
 8001238:	d9f6      	bls.n	8001228 <HAL_RCC_OscConfig+0x18c>
 800123a:	e771      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123c:	4c33      	ldr	r4, [pc, #204]	; (800130c <HAL_RCC_OscConfig+0x270>)
 800123e:	69e3      	ldr	r3, [r4, #28]
 8001240:	00d8      	lsls	r0, r3, #3
 8001242:	d424      	bmi.n	800128e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001244:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	69e3      	ldr	r3, [r4, #28]
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61e3      	str	r3, [r4, #28]
 800124e:	69e3      	ldr	r3, [r4, #28]
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4e30      	ldr	r6, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x280>)
 800125a:	6833      	ldr	r3, [r6, #0]
 800125c:	05d9      	lsls	r1, r3, #23
 800125e:	d518      	bpl.n	8001292 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	68eb      	ldr	r3, [r5, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d126      	bne.n	80012b4 <HAL_RCC_OscConfig+0x218>
 8001266:	6a23      	ldr	r3, [r4, #32]
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800126e:	f7ff fa0d 	bl	800068c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001276:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	6a23      	ldr	r3, [r4, #32]
 800127a:	079b      	lsls	r3, r3, #30
 800127c:	d53f      	bpl.n	80012fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800127e:	2f00      	cmp	r7, #0
 8001280:	f43f af1d 	beq.w	80010be <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001284:	69e3      	ldr	r3, [r4, #28]
 8001286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128a:	61e3      	str	r3, [r4, #28]
 800128c:	e717      	b.n	80010be <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2700      	movs	r7, #0
 8001290:	e7e2      	b.n	8001258 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	6833      	ldr	r3, [r6, #0]
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800129a:	f7ff f9f7 	bl	800068c <HAL_GetTick>
 800129e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	6833      	ldr	r3, [r6, #0]
 80012a2:	05da      	lsls	r2, r3, #23
 80012a4:	d4dc      	bmi.n	8001260 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff f9f1 	bl	800068c <HAL_GetTick>
 80012aa:	eba0 0008 	sub.w	r0, r0, r8
 80012ae:	2864      	cmp	r0, #100	; 0x64
 80012b0:	d9f6      	bls.n	80012a0 <HAL_RCC_OscConfig+0x204>
 80012b2:	e735      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	b9ab      	cbnz	r3, 80012e2 <HAL_RCC_OscConfig+0x246>
 80012b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6223      	str	r3, [r4, #32]
 80012c2:	6a23      	ldr	r3, [r4, #32]
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012ca:	f7ff f9df 	bl	800068c <HAL_GetTick>
 80012ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	6a23      	ldr	r3, [r4, #32]
 80012d2:	0798      	lsls	r0, r3, #30
 80012d4:	d5d3      	bpl.n	800127e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff f9d9 	bl	800068c <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	4540      	cmp	r0, r8
 80012de:	d9f7      	bls.n	80012d0 <HAL_RCC_OscConfig+0x234>
 80012e0:	e71e      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	6a23      	ldr	r3, [r4, #32]
 80012e6:	d103      	bne.n	80012f0 <HAL_RCC_OscConfig+0x254>
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6223      	str	r3, [r4, #32]
 80012ee:	e7ba      	b.n	8001266 <HAL_RCC_OscConfig+0x1ca>
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6223      	str	r3, [r4, #32]
 80012f6:	6a23      	ldr	r3, [r4, #32]
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	e7b6      	b.n	800126c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff f9c5 	bl	800068c <HAL_GetTick>
 8001302:	eba0 0008 	sub.w	r0, r0, r8
 8001306:	42b0      	cmp	r0, r6
 8001308:	d9b6      	bls.n	8001278 <HAL_RCC_OscConfig+0x1dc>
 800130a:	e709      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
 800130c:	40021000 	.word	0x40021000
 8001310:	42420000 	.word	0x42420000
 8001314:	42420480 	.word	0x42420480
 8001318:	20000008 	.word	0x20000008
 800131c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001320:	4c22      	ldr	r4, [pc, #136]	; (80013ac <HAL_RCC_OscConfig+0x310>)
 8001322:	6863      	ldr	r3, [r4, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	f43f aee2 	beq.w	80010f2 <HAL_RCC_OscConfig+0x56>
 800132e:	2300      	movs	r3, #0
 8001330:	4e1f      	ldr	r6, [pc, #124]	; (80013b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001332:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001334:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001336:	d12b      	bne.n	8001390 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001338:	f7ff f9a8 	bl	800068c <HAL_GetTick>
 800133c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	0199      	lsls	r1, r3, #6
 8001342:	d41f      	bmi.n	8001384 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001344:	6a2b      	ldr	r3, [r5, #32]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134c:	6862      	ldr	r2, [r4, #4]
 800134e:	68a9      	ldr	r1, [r5, #8]
 8001350:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001354:	430a      	orrs	r2, r1
 8001356:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800135a:	6862      	ldr	r2, [r4, #4]
 800135c:	430b      	orrs	r3, r1
 800135e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001362:	4313      	orrs	r3, r2
 8001364:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001366:	2301      	movs	r3, #1
 8001368:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800136a:	f7ff f98f 	bl	800068c <HAL_GetTick>
 800136e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	019a      	lsls	r2, r3, #6
 8001374:	f53f aea7 	bmi.w	80010c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff f988 	bl	800068c <HAL_GetTick>
 800137c:	1b40      	subs	r0, r0, r5
 800137e:	2802      	cmp	r0, #2
 8001380:	d9f6      	bls.n	8001370 <HAL_RCC_OscConfig+0x2d4>
 8001382:	e6cd      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff f982 	bl	800068c <HAL_GetTick>
 8001388:	1bc0      	subs	r0, r0, r7
 800138a:	2802      	cmp	r0, #2
 800138c:	d9d7      	bls.n	800133e <HAL_RCC_OscConfig+0x2a2>
 800138e:	e6c7      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001390:	f7ff f97c 	bl	800068c <HAL_GetTick>
 8001394:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	f57f ae94 	bpl.w	80010c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff f975 	bl	800068c <HAL_GetTick>
 80013a2:	1b40      	subs	r0, r0, r5
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d9f6      	bls.n	8001396 <HAL_RCC_OscConfig+0x2fa>
 80013a8:	e6ba      	b.n	8001120 <HAL_RCC_OscConfig+0x84>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	42420060 	.word	0x42420060

080013b4 <HAL_RCC_GetSysClockFreq>:
{
 80013b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80013b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ba:	ac02      	add	r4, sp, #8
 80013bc:	f103 0510 	add.w	r5, r3, #16
 80013c0:	4622      	mov	r2, r4
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	6859      	ldr	r1, [r3, #4]
 80013c6:	3308      	adds	r3, #8
 80013c8:	c203      	stmia	r2!, {r0, r1}
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	4614      	mov	r4, r2
 80013ce:	d1f7      	bne.n	80013c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013d0:	2301      	movs	r3, #1
 80013d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80013d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80013d8:	4911      	ldr	r1, [pc, #68]	; (8001420 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80013de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	f003 020c 	and.w	r2, r3, #12
 80013e4:	2a08      	cmp	r2, #8
 80013e6:	d117      	bne.n	8001418 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013ec:	a806      	add	r0, sp, #24
 80013ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f6:	d50c      	bpl.n	8001412 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	480a      	ldr	r0, [pc, #40]	; (8001424 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001400:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001402:	aa06      	add	r2, sp, #24
 8001404:	4413      	add	r3, r2
 8001406:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800140e:	b007      	add	sp, #28
 8001410:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_RCC_GetSysClockFreq+0x74>)
 8001414:	4350      	muls	r0, r2
 8001416:	e7fa      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800141a:	e7f8      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x5a>
 800141c:	080020cc 	.word	0x080020cc
 8001420:	40021000 	.word	0x40021000
 8001424:	007a1200 	.word	0x007a1200
 8001428:	003d0900 	.word	0x003d0900

0800142c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800142c:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <HAL_RCC_ClockConfig+0x138>)
{
 800142e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001432:	6813      	ldr	r3, [r2, #0]
{
 8001434:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	428b      	cmp	r3, r1
{
 800143c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800143e:	d328      	bcc.n	8001492 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	682a      	ldr	r2, [r5, #0]
 8001442:	0791      	lsls	r1, r2, #30
 8001444:	d432      	bmi.n	80014ac <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001446:	07d2      	lsls	r2, r2, #31
 8001448:	d438      	bmi.n	80014bc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800144a:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_RCC_ClockConfig+0x138>)
 800144c:	6813      	ldr	r3, [r2, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	429e      	cmp	r6, r3
 8001454:	d373      	bcc.n	800153e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001456:	682a      	ldr	r2, [r5, #0]
 8001458:	4c43      	ldr	r4, [pc, #268]	; (8001568 <HAL_RCC_ClockConfig+0x13c>)
 800145a:	f012 0f04 	tst.w	r2, #4
 800145e:	d179      	bne.n	8001554 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	0713      	lsls	r3, r2, #28
 8001462:	d506      	bpl.n	8001472 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	692a      	ldr	r2, [r5, #16]
 8001468:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800146c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001470:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001472:	f7ff ff9f 	bl	80013b4 <HAL_RCC_GetSysClockFreq>
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	4a3c      	ldr	r2, [pc, #240]	; (800156c <HAL_RCC_ClockConfig+0x140>)
 800147a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	40d8      	lsrs	r0, r3
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_ClockConfig+0x144>)
 8001484:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff f8be 	bl	8000608 <HAL_InitTick>
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
}
 800148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	f023 0307 	bic.w	r3, r3, #7
 8001498:	430b      	orrs	r3, r1
 800149a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800149c:	6813      	ldr	r3, [r2, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d0cc      	beq.n	8001440 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	492e      	ldr	r1, [pc, #184]	; (8001568 <HAL_RCC_ClockConfig+0x13c>)
 80014ae:	68a8      	ldr	r0, [r5, #8]
 80014b0:	684b      	ldr	r3, [r1, #4]
 80014b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b6:	4303      	orrs	r3, r0
 80014b8:	604b      	str	r3, [r1, #4]
 80014ba:	e7c4      	b.n	8001446 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014bc:	686a      	ldr	r2, [r5, #4]
 80014be:	4c2a      	ldr	r4, [pc, #168]	; (8001568 <HAL_RCC_ClockConfig+0x13c>)
 80014c0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	d0ec      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014cc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80014da:	f7ff f8d7 	bl	800068c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80014e0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d114      	bne.n	8001510 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d0ac      	beq.n	800144a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff f8cc 	bl	800068c <HAL_GetTick>
 80014f4:	1bc0      	subs	r0, r0, r7
 80014f6:	4540      	cmp	r0, r8
 80014f8:	d9f5      	bls.n	80014e6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
 80014fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001500:	2a02      	cmp	r2, #2
 8001502:	d102      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001508:	e7df      	b.n	80014ca <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150a:	f013 0f02 	tst.w	r3, #2
 800150e:	e7dc      	b.n	80014ca <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001510:	2b02      	cmp	r3, #2
 8001512:	d10f      	bne.n	8001534 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	6863      	ldr	r3, [r4, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d095      	beq.n	800144a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151e:	f7ff f8b5 	bl	800068c <HAL_GetTick>
 8001522:	1bc0      	subs	r0, r0, r7
 8001524:	4540      	cmp	r0, r8
 8001526:	d9f5      	bls.n	8001514 <HAL_RCC_ClockConfig+0xe8>
 8001528:	e7e7      	b.n	80014fa <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152a:	f7ff f8af 	bl	800068c <HAL_GetTick>
 800152e:	1bc0      	subs	r0, r0, r7
 8001530:	4540      	cmp	r0, r8
 8001532:	d8e2      	bhi.n	80014fa <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001534:	6863      	ldr	r3, [r4, #4]
 8001536:	f013 0f0c 	tst.w	r3, #12
 800153a:	d1f6      	bne.n	800152a <HAL_RCC_ClockConfig+0xfe>
 800153c:	e785      	b.n	800144a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f023 0307 	bic.w	r3, r3, #7
 8001544:	4333      	orrs	r3, r6
 8001546:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	429e      	cmp	r6, r3
 8001550:	d1a9      	bne.n	80014a6 <HAL_RCC_ClockConfig+0x7a>
 8001552:	e780      	b.n	8001456 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	68e9      	ldr	r1, [r5, #12]
 8001558:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800155c:	430b      	orrs	r3, r1
 800155e:	6063      	str	r3, [r4, #4]
 8001560:	e77e      	b.n	8001460 <HAL_RCC_ClockConfig+0x34>
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	08002107 	.word	0x08002107
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_RCC_GetHCLKFreq>:
}
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_RCC_GetHCLKFreq+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800158e:	6810      	ldr	r0, [r2, #0]
} 
 8001590:	40d8      	lsrs	r0, r3
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	08002117 	.word	0x08002117
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015a0:	6803      	ldr	r3, [r0, #0]
{
 80015a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015a6:	07d9      	lsls	r1, r3, #31
{
 80015a8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015aa:	d520      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ac:	4c35      	ldr	r4, [pc, #212]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015ae:	69e3      	ldr	r3, [r4, #28]
 80015b0:	00da      	lsls	r2, r3, #3
 80015b2:	d432      	bmi.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80015b4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	69e3      	ldr	r3, [r4, #28]
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61e3      	str	r3, [r4, #28]
 80015be:	69e3      	ldr	r3, [r4, #28]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	4e2f      	ldr	r6, [pc, #188]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80015ca:	6833      	ldr	r3, [r6, #0]
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	d526      	bpl.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015d0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015d2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015d6:	d136      	bne.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015d8:	6a23      	ldr	r3, [r4, #32]
 80015da:	686a      	ldr	r2, [r5, #4]
 80015dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e0:	4313      	orrs	r3, r2
 80015e2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015e4:	b11f      	cbz	r7, 80015ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	69e3      	ldr	r3, [r4, #28]
 80015e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015ee:	6828      	ldr	r0, [r5, #0]
 80015f0:	0783      	lsls	r3, r0, #30
 80015f2:	d506      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015f6:	68a9      	ldr	r1, [r5, #8]
 80015f8:	6853      	ldr	r3, [r2, #4]
 80015fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015fe:	430b      	orrs	r3, r1
 8001600:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001602:	f010 0010 	ands.w	r0, r0, #16
 8001606:	d01b      	beq.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800160a:	68e9      	ldr	r1, [r5, #12]
 800160c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800160e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001610:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001614:	430b      	orrs	r3, r1
 8001616:	6053      	str	r3, [r2, #4]
 8001618:	e012      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2700      	movs	r7, #0
 800161c:	e7d4      	b.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	6833      	ldr	r3, [r6, #0]
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001626:	f7ff f831 	bl	800068c <HAL_GetTick>
 800162a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	6833      	ldr	r3, [r6, #0]
 800162e:	05d8      	lsls	r0, r3, #23
 8001630:	d4ce      	bmi.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff f82b 	bl	800068c <HAL_GetTick>
 8001636:	eba0 0008 	sub.w	r0, r0, r8
 800163a:	2864      	cmp	r0, #100	; 0x64
 800163c:	d9f6      	bls.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
}
 8001640:	b002      	add	sp, #8
 8001642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001646:	686a      	ldr	r2, [r5, #4]
 8001648:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800164c:	4293      	cmp	r3, r2
 800164e:	d0c3      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001650:	2001      	movs	r0, #1
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001654:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001656:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001658:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800165a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800165e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001660:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001662:	07d9      	lsls	r1, r3, #31
 8001664:	d5b8      	bpl.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001666:	f7ff f811 	bl	800068c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800166e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	6a23      	ldr	r3, [r4, #32]
 8001672:	079a      	lsls	r2, r3, #30
 8001674:	d4b0      	bmi.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff f809 	bl	800068c <HAL_GetTick>
 800167a:	1b80      	subs	r0, r0, r6
 800167c:	4540      	cmp	r0, r8
 800167e:	d9f7      	bls.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001680:	e7dd      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	42420440 	.word	0x42420440

08001690 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001696:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001698:	ad02      	add	r5, sp, #8
 800169a:	f103 0610 	add.w	r6, r3, #16
 800169e:	462a      	mov	r2, r5
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	3308      	adds	r3, #8
 80016a6:	c203      	stmia	r2!, {r0, r1}
 80016a8:	42b3      	cmp	r3, r6
 80016aa:	4615      	mov	r5, r2
 80016ac:	d1f7      	bne.n	800169e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ae:	2301      	movs	r3, #1
 80016b0:	f88d 3004 	strb.w	r3, [sp, #4]
 80016b4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80016b6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016b8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80016bc:	d047      	beq.n	800174e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80016be:	2c10      	cmp	r4, #16
 80016c0:	d017      	beq.n	80016f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80016c2:	2c01      	cmp	r4, #1
 80016c4:	d14f      	bne.n	8001766 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80016c6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80016ca:	4a29      	ldr	r2, [pc, #164]	; (8001770 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80016cc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80016ce:	4019      	ands	r1, r3
 80016d0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80016d4:	d044      	beq.n	8001760 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80016d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016de:	d12d      	bne.n	800173c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80016e0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80016e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80016e6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80016ea:	bf08      	it	eq
 80016ec:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80016ee:	b006      	add	sp, #24
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80016f4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80016fc:	d0f7      	beq.n	80016ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fe:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001702:	a806      	add	r0, sp, #24
 8001704:	4402      	add	r2, r0
 8001706:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800170c:	bf41      	itttt	mi
 800170e:	685a      	ldrmi	r2, [r3, #4]
 8001710:	a906      	addmi	r1, sp, #24
 8001712:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001716:	1852      	addmi	r2, r2, r1
 8001718:	bf44      	itt	mi
 800171a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800171e:	4a15      	ldrmi	r2, [pc, #84]	; (8001774 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001720:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001722:	bf4c      	ite	mi
 8001724:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001728:	4a13      	ldrpl	r2, [pc, #76]	; (8001778 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800172a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800172c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001730:	d4dd      	bmi.n	80016ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001732:	2303      	movs	r3, #3
 8001734:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001736:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800173a:	e7d8      	b.n	80016ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800173c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001740:	d111      	bne.n	8001766 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001742:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001744:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001748:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800174c:	e7cd      	b.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800174e:	f7ff ff17 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800175a:	3301      	adds	r3, #1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	e7ea      	b.n	8001736 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001760:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001764:	e7c3      	b.n	80016ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001766:	2000      	movs	r0, #0
 8001768:	e7c1      	b.n	80016ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800176a:	bf00      	nop
 800176c:	080020dc 	.word	0x080020dc
 8001770:	40021000 	.word	0x40021000
 8001774:	007a1200 	.word	0x007a1200
 8001778:	003d0900 	.word	0x003d0900

0800177c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800177c:	6a03      	ldr	r3, [r0, #32]
{
 800177e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001786:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001788:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800178a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800178c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800178e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001792:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001794:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001796:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800179a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800179c:	4d0a      	ldr	r5, [pc, #40]	; (80017c8 <TIM_OC1_SetConfig+0x4c>)
 800179e:	42a8      	cmp	r0, r5
 80017a0:	d10b      	bne.n	80017ba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80017a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80017a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80017a8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80017aa:	698e      	ldr	r6, [r1, #24]
 80017ac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80017ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80017b2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80017b4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017b8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80017be:	684a      	ldr	r2, [r1, #4]
 80017c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017c2:	6203      	str	r3, [r0, #32]
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
 80017c6:	bf00      	nop
 80017c8:	40012c00 	.word	0x40012c00

080017cc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017cc:	6a03      	ldr	r3, [r0, #32]
{
 80017ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017da:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80017e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017ee:	4d0b      	ldr	r5, [pc, #44]	; (800181c <TIM_OC3_SetConfig+0x50>)
 80017f0:	42a8      	cmp	r0, r5
 80017f2:	d10d      	bne.n	8001810 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80017f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017fe:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001800:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001802:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001806:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800180c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001810:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001812:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001814:	684a      	ldr	r2, [r1, #4]
 8001816:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001818:	6203      	str	r3, [r0, #32]
 800181a:	bd70      	pop	{r4, r5, r6, pc}
 800181c:	40012c00 	.word	0x40012c00

08001820 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001820:	6a03      	ldr	r3, [r0, #32]
{
 8001822:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001828:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800182a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800182c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800182e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001830:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001832:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001836:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800183a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800183c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001840:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001844:	4d06      	ldr	r5, [pc, #24]	; (8001860 <TIM_OC4_SetConfig+0x40>)
 8001846:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001848:	bf02      	ittt	eq
 800184a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800184c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001850:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001854:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001856:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001858:	684a      	ldr	r2, [r1, #4]
 800185a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800185c:	6203      	str	r3, [r0, #32]
 800185e:	bd30      	pop	{r4, r5, pc}
 8001860:	40012c00 	.word	0x40012c00

08001864 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001866:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001868:	4290      	cmp	r0, r2
 800186a:	d00a      	beq.n	8001882 <TIM_Base_SetConfig+0x1e>
 800186c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001870:	d007      	beq.n	8001882 <TIM_Base_SetConfig+0x1e>
 8001872:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001876:	4290      	cmp	r0, r2
 8001878:	d003      	beq.n	8001882 <TIM_Base_SetConfig+0x1e>
 800187a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800187e:	4290      	cmp	r0, r2
 8001880:	d115      	bne.n	80018ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001882:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001888:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <TIM_Base_SetConfig+0x6c>)
 800188c:	4290      	cmp	r0, r2
 800188e:	d00a      	beq.n	80018a6 <TIM_Base_SetConfig+0x42>
 8001890:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001894:	d007      	beq.n	80018a6 <TIM_Base_SetConfig+0x42>
 8001896:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800189a:	4290      	cmp	r0, r2
 800189c:	d003      	beq.n	80018a6 <TIM_Base_SetConfig+0x42>
 800189e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a2:	4290      	cmp	r0, r2
 80018a4:	d103      	bne.n	80018ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80018a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ac:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80018ae:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80018b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80018b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80018b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b8:	688b      	ldr	r3, [r1, #8]
 80018ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80018bc:	680b      	ldr	r3, [r1, #0]
 80018be:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <TIM_Base_SetConfig+0x6c>)
 80018c2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80018c4:	bf04      	itt	eq
 80018c6:	690b      	ldreq	r3, [r1, #16]
 80018c8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80018ca:	2301      	movs	r3, #1
 80018cc:	6143      	str	r3, [r0, #20]
 80018ce:	4770      	bx	lr
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <HAL_TIM_PWM_Init>:
{
 80018d4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018d6:	4604      	mov	r4, r0
 80018d8:	b1a0      	cbz	r0, 8001904 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018e2:	b91b      	cbnz	r3, 80018ec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80018e8:	f000 fb08 	bl	8001efc <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ee:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f4:	1d21      	adds	r1, r4, #4
 80018f6:	f7ff ffb5 	bl	8001864 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018fa:	2301      	movs	r3, #1
  return HAL_OK;
 80018fc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80018fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001902:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
}
 8001906:	bd10      	pop	{r4, pc}

08001908 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001908:	6a03      	ldr	r3, [r0, #32]
{
 800190a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800190c:	f023 0310 	bic.w	r3, r3, #16
 8001910:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001912:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001914:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001916:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001918:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800191a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800191e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001922:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001924:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001928:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800192c:	4d0b      	ldr	r5, [pc, #44]	; (800195c <TIM_OC2_SetConfig+0x54>)
 800192e:	42a8      	cmp	r0, r5
 8001930:	d10d      	bne.n	800194e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001932:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001938:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800193c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800193e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001940:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001944:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800194a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800194e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001950:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001952:	684a      	ldr	r2, [r1, #4]
 8001954:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001956:	6203      	str	r3, [r0, #32]
 8001958:	bd70      	pop	{r4, r5, r6, pc}
 800195a:	bf00      	nop
 800195c:	40012c00 	.word	0x40012c00

08001960 <HAL_TIM_PWM_ConfigChannel>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001962:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001966:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001968:	2b01      	cmp	r3, #1
 800196a:	f04f 0002 	mov.w	r0, #2
 800196e:	d025      	beq.n	80019bc <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001970:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001972:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800197a:	2a0c      	cmp	r2, #12
 800197c:	d818      	bhi.n	80019b0 <HAL_TIM_PWM_ConfigChannel+0x50>
 800197e:	e8df f002 	tbb	[pc, r2]
 8001982:	1707      	.short	0x1707
 8001984:	171e1717 	.word	0x171e1717
 8001988:	172f1717 	.word	0x172f1717
 800198c:	1717      	.short	0x1717
 800198e:	40          	.byte	0x40
 800198f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001990:	6820      	ldr	r0, [r4, #0]
 8001992:	f7ff fef3 	bl	800177c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001996:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001998:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	f042 0208 	orr.w	r2, r2, #8
 80019a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	f022 0204 	bic.w	r2, r2, #4
 80019a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80019ae:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80019b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80019b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80019b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019bc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	f7ff ffa2 	bl	8001908 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80019c6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019de:	e7e6      	b.n	80019ae <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f7ff fef3 	bl	80017cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019e8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	f042 0208 	orr.w	r2, r2, #8
 80019f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80019fe:	61da      	str	r2, [r3, #28]
    break;
 8001a00:	e7d6      	b.n	80019b0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	f7ff ff0c 	bl	8001820 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a08:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001a0a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a22:	e7ec      	b.n	80019fe <HAL_TIM_PWM_ConfigChannel+0x9e>

08001a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a24:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a26:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a28:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001a2a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001a2c:	ea23 0304 	bic.w	r3, r3, r4
 8001a30:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a32:	6a03      	ldr	r3, [r0, #32]
 8001a34:	408a      	lsls	r2, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	6202      	str	r2, [r0, #32]
 8001a3a:	bd10      	pop	{r4, pc}

08001a3c <HAL_TIM_PWM_Start>:
{
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a40:	2201      	movs	r2, #1
 8001a42:	6800      	ldr	r0, [r0, #0]
 8001a44:	f7ff ffee 	bl	8001a24 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_TIM_PWM_Start+0x28>)
}
 8001a4c:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a4e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001a50:	bf02      	ittt	eq
 8001a52:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001a54:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001a58:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bd10      	pop	{r4, pc}
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001a68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a6c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f04f 0302 	mov.w	r3, #2
 8001a74:	d018      	beq.n	8001aa8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001a76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a7a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a7c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a7e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a80:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a86:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4322      	orrs	r2, r4
 8001a8c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a94:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001aa8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001aaa:	bd10      	pop	{r4, pc}

08001aac <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef *hadc)
{
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < channels; i++){
 8001aae:	2400      	movs	r4, #0
		volts[i] = (float)adc_buff[i] * k;
 8001ab0:	4d07      	ldr	r5, [pc, #28]	; (8001ad0 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001ab2:	4f08      	ldr	r7, [pc, #32]	; (8001ad4 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001ab4:	4e08      	ldr	r6, [pc, #32]	; (8001ad8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001ab6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001aba:	f7fe fbfd 	bl	80002b8 <__aeabi_ui2f>
 8001abe:	4631      	mov	r1, r6
 8001ac0:	f7fe fc52 	bl	8000368 <__aeabi_fmul>
 8001ac4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (int i = 0; i < channels; i++){
 8001ac8:	3401      	adds	r4, #1
 8001aca:	2c04      	cmp	r4, #4
 8001acc:	d1f3      	bne.n	8001ab6 <HAL_ADC_ConvHalfCpltCallback+0xa>
	}
}
 8001ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad0:	20000130 	.word	0x20000130
 8001ad4:	20000140 	.word	0x20000140
 8001ad8:	3817bad9 	.word	0x3817bad9

08001adc <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ae8:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aea:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aec:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001af6:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afe:	f7ff facd 	bl	800109c <HAL_RCC_OscConfig>
 8001b02:	b100      	cbz	r0, 8001b06 <SystemClock_Config+0x2a>
 8001b04:	e7fe      	b.n	8001b04 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b10:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b12:	4621      	mov	r1, r4
 8001b14:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b16:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b18:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1a:	f7ff fc87 	bl	800142c <HAL_RCC_ClockConfig>
 8001b1e:	b100      	cbz	r0, 8001b22 <SystemClock_Config+0x46>
 8001b20:	e7fe      	b.n	8001b20 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b26:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b28:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b2a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f7ff fd38 	bl	80015a0 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4604      	mov	r4, r0
 8001b32:	b100      	cbz	r0, 8001b36 <SystemClock_Config+0x5a>
 8001b34:	e7fe      	b.n	8001b34 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b36:	f7ff fd1d 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b42:	f7ff f89d 	bl	8000c80 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b46:	2004      	movs	r0, #4
 8001b48:	f7ff f8b0 	bl	8000cac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	4621      	mov	r1, r4
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b54:	f7ff f854 	bl	8000c00 <HAL_NVIC_SetPriority>
}
 8001b58:	b014      	add	sp, #80	; 0x50
 8001b5a:	bd10      	pop	{r4, pc}

08001b5c <main>:
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001b60:	f7fe fd76 	bl	8000650 <HAL_Init>
  SystemClock_Config();
 8001b64:	f7ff ffba 	bl	8001adc <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b68:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <main+0x258>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b6a:	200b      	movs	r0, #11
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6c:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001b6e:	4c92      	ldr	r4, [pc, #584]	; (8001db8 <main+0x25c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b78:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	f002 0220 	and.w	r2, r2, #32
 8001b7e:	9202      	str	r2, [sp, #8]
 8001b80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.NbrOfConversion = 4;
 8001b84:	2504      	movs	r5, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	f042 0204 	orr.w	r2, r2, #4
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	f002 0204 	and.w	r2, r2, #4
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	f042 0208 	orr.w	r2, r2, #8
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	f002 0208 	and.w	r2, r2, #8
 8001ba4:	9204      	str	r2, [sp, #16]
 8001ba6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb4:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bbe:	f7ff f81f 	bl	8000c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc2:	200b      	movs	r0, #11
 8001bc4:	f7ff f850 	bl	8000c68 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001bc8:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <main+0x260>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001bce:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd4:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd6:	2300      	movs	r3, #0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bd8:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bda:	60e7      	str	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bdc:	6163      	str	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bde:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be0:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001be2:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001be4:	f7fe ff12 	bl	8000a0c <HAL_ADC_Init>
 8001be8:	b100      	cbz	r0, 8001bec <main+0x90>
 8001bea:	e7fe      	b.n	8001bea <main+0x8e>
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001bec:	2603      	movs	r6, #3
  sConfig.Channel = ADC_CHANNEL_0;
 8001bee:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf0:	a907      	add	r1, sp, #28
 8001bf2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	9708      	str	r7, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001bf6:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	f7fe fd9c 	bl	8000734 <HAL_ADC_ConfigChannel>
 8001bfc:	b100      	cbz	r0, 8001c00 <main+0xa4>
 8001bfe:	e7fe      	b.n	8001bfe <main+0xa2>
  sConfig.Channel = ADC_CHANNEL_1;
 8001c00:	9707      	str	r7, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c02:	2702      	movs	r7, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	a907      	add	r1, sp, #28
 8001c06:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c08:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0a:	f7fe fd93 	bl	8000734 <HAL_ADC_ConfigChannel>
 8001c0e:	b100      	cbz	r0, 8001c12 <main+0xb6>
 8001c10:	e7fe      	b.n	8001c10 <main+0xb4>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c12:	a907      	add	r1, sp, #28
 8001c14:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001c16:	9707      	str	r7, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c18:	9608      	str	r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c1a:	f7fe fd8b 	bl	8000734 <HAL_ADC_ConfigChannel>
 8001c1e:	b100      	cbz	r0, 8001c22 <main+0xc6>
 8001c20:	e7fe      	b.n	8001c20 <main+0xc4>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	a907      	add	r1, sp, #28
 8001c24:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001c26:	9607      	str	r6, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c28:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2a:	f7fe fd83 	bl	8000734 <HAL_ADC_ConfigChannel>
 8001c2e:	b100      	cbz	r0, 8001c32 <main+0xd6>
 8001c30:	e7fe      	b.n	8001c30 <main+0xd4>
  htim3.Instance = TIM3;
 8001c32:	4c63      	ldr	r4, [pc, #396]	; (8001dc0 <main+0x264>)
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <main+0x268>)
  htim3.Init.Prescaler = 0;
 8001c36:	6060      	str	r0, [r4, #4]
  htim3.Instance = TIM3;
 8001c38:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 1799;
 8001c3a:	f240 7307 	movw	r3, #1799	; 0x707
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c44:	4620      	mov	r0, r4
  htim3.Init.Period = 1799;
 8001c46:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c48:	f7ff fe44 	bl	80018d4 <HAL_TIM_PWM_Init>
 8001c4c:	b100      	cbz	r0, 8001c50 <main+0xf4>
 8001c4e:	e7fe      	b.n	8001c4e <main+0xf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c54:	a905      	add	r1, sp, #20
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ff06 	bl	8001a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	b100      	cbz	r0, 8001c62 <main+0x106>
 8001c60:	e7fe      	b.n	8001c60 <main+0x104>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1360;
 8001c66:	f44f 63aa 	mov.w	r3, #1360	; 0x550
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6c:	a907      	add	r1, sp, #28
 8001c6e:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1360;
 8001c70:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c72:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	f7ff fe74 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001c78:	b100      	cbz	r0, 8001c7c <main+0x120>
 8001c7a:	e7fe      	b.n	8001c7a <main+0x11e>
  sConfigOC.Pulse = 1020;
 8001c7c:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c80:	462a      	mov	r2, r5
 8001c82:	a907      	add	r1, sp, #28
 8001c84:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1020;
 8001c86:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c88:	f7ff fe6a 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	b100      	cbz	r0, 8001c90 <main+0x134>
 8001c8e:	e7fe      	b.n	8001c8e <main+0x132>
  sConfigOC.Pulse = 0;
 8001c90:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c92:	2208      	movs	r2, #8
 8001c94:	a907      	add	r1, sp, #28
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fe62 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001c9c:	b100      	cbz	r0, 8001ca0 <main+0x144>
 8001c9e:	e7fe      	b.n	8001c9e <main+0x142>
  sConfigOC.Pulse = 340;
 8001ca0:	f44f 76aa 	mov.w	r6, #340	; 0x154
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	a907      	add	r1, sp, #28
 8001ca8:	4845      	ldr	r0, [pc, #276]	; (8001dc0 <main+0x264>)
  sConfigOC.Pulse = 340;
 8001caa:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cac:	f7ff fe58 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	b100      	cbz	r0, 8001cb6 <main+0x15a>
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x158>
  HAL_TIM_MspPostInit(&htim3);
 8001cb6:	4842      	ldr	r0, [pc, #264]	; (8001dc0 <main+0x264>)
 8001cb8:	f000 f946 	bl	8001f48 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8001cbc:	4c42      	ldr	r4, [pc, #264]	; (8001dc8 <main+0x26c>)
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <main+0x270>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cc0:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 0;
 8001cc2:	e884 0028 	stmia.w	r4, {r3, r5}
  htim4.Init.Period = 1799;
 8001cc6:	f240 7307 	movw	r3, #1799	; 0x707
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 1799;
 8001ccc:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd2:	f7ff fdff 	bl	80018d4 <HAL_TIM_PWM_Init>
 8001cd6:	b100      	cbz	r0, 8001cda <main+0x17e>
 8001cd8:	e7fe      	b.n	8001cd8 <main+0x17c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cde:	a905      	add	r1, sp, #20
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff fec1 	bl	8001a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	b100      	cbz	r0, 8001cec <main+0x190>
 8001cea:	e7fe      	b.n	8001cea <main+0x18e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cec:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001cee:	2504      	movs	r5, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1360;
 8001cf2:	f44f 63aa 	mov.w	r3, #1360	; 0x550
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf8:	a907      	add	r1, sp, #28
 8001cfa:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1360;
 8001cfc:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001cfe:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d00:	f7ff fe2e 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	b100      	cbz	r0, 8001d08 <main+0x1ac>
 8001d06:	e7fe      	b.n	8001d06 <main+0x1aa>
  sConfigOC.Pulse = 1020;
 8001d08:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d0c:	462a      	mov	r2, r5
 8001d0e:	a907      	add	r1, sp, #28
 8001d10:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1020;
 8001d12:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d14:	f7ff fe24 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001d18:	b100      	cbz	r0, 8001d1c <main+0x1c0>
 8001d1a:	e7fe      	b.n	8001d1a <main+0x1be>
  sConfigOC.Pulse = 680;
 8001d1c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d20:	2208      	movs	r2, #8
 8001d22:	a907      	add	r1, sp, #28
 8001d24:	4620      	mov	r0, r4
  sConfigOC.Pulse = 680;
 8001d26:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d28:	f7ff fe1a 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	b100      	cbz	r0, 8001d30 <main+0x1d4>
 8001d2e:	e7fe      	b.n	8001d2e <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d30:	220c      	movs	r2, #12
 8001d32:	a907      	add	r1, sp, #28
 8001d34:	4620      	mov	r0, r4
  sConfigOC.Pulse = 340;
 8001d36:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d38:	f7ff fe12 	bl	8001960 <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	b100      	cbz	r0, 8001d42 <main+0x1e6>
 8001d40:	e7fe      	b.n	8001d40 <main+0x1e4>
  HAL_TIM_MspPostInit(&htim4);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f000 f900 	bl	8001f48 <HAL_TIM_MspPostInit>
  HAL_ADC_Init(&hadc1);
 8001d48:	481b      	ldr	r0, [pc, #108]	; (8001db8 <main+0x25c>)
 8001d4a:	f7fe fe5f 	bl	8000a0c <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001d4e:	481a      	ldr	r0, [pc, #104]	; (8001db8 <main+0x25c>)
 8001d50:	f7fe fedc 	bl	8000b0c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,adc_buff,channels);
 8001d54:	462a      	mov	r2, r5
 8001d56:	491e      	ldr	r1, [pc, #120]	; (8001dd0 <main+0x274>)
 8001d58:	4817      	ldr	r0, [pc, #92]	; (8001db8 <main+0x25c>)
 8001d5a:	f7fe fda7 	bl	80008ac <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Init(&htim3);
 8001d5e:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <main+0x264>)
 8001d60:	f7ff fdb8 	bl	80018d4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d64:	4631      	mov	r1, r6
 8001d66:	4816      	ldr	r0, [pc, #88]	; (8001dc0 <main+0x264>)
 8001d68:	f7ff fe68 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <main+0x264>)
 8001d70:	f7ff fe64 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d74:	2108      	movs	r1, #8
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <main+0x264>)
 8001d78:	f7ff fe60 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d7c:	210c      	movs	r1, #12
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <main+0x264>)
 8001d80:	f7ff fe5c 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Init(&htim4);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fda5 	bl	80018d4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001d8a:	4631      	mov	r1, r6
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fe55 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001d92:	4629      	mov	r1, r5
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff fe51 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fe4d 	bl	8001a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001da2:	210c      	movs	r1, #12
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff fe49 	bl	8001a3c <HAL_TIM_PWM_Start>
  	HAL_Delay(100);
 8001daa:	2064      	movs	r0, #100	; 0x64
 8001dac:	f7fe fc74 	bl	8000698 <HAL_Delay>
 8001db0:	e7fb      	b.n	8001daa <main+0x24e>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	200000ac 	.word	0x200000ac
 8001dbc:	40012400 	.word	0x40012400
 8001dc0:	2000006c 	.word	0x2000006c
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	2000002c 	.word	0x2000002c
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	20000140 	.word	0x20000140

08001dd4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001dd4:	e7fe      	b.n	8001dd4 <_Error_Handler>
	...

08001dd8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_MspInit+0x98>)
{
 8001dda:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ddc:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dde:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	f002 0201 	and.w	r2, r2, #1
 8001dec:	9200      	str	r2, [sp, #0]
 8001dee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001df6:	61da      	str	r2, [r3, #28]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e02:	f7fe feeb 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	f06f 000b 	mvn.w	r0, #11
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	f7fe fef7 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f06f 000a 	mvn.w	r0, #10
 8001e18:	4611      	mov	r1, r2
 8001e1a:	f7fe fef1 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f06f 0009 	mvn.w	r0, #9
 8001e24:	4611      	mov	r1, r2
 8001e26:	f7fe feeb 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f06f 0004 	mvn.w	r0, #4
 8001e30:	4611      	mov	r1, r2
 8001e32:	f7fe fee5 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f06f 0003 	mvn.w	r0, #3
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	f7fe fedf 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f06f 0001 	mvn.w	r0, #1
 8001e48:	4611      	mov	r1, r2
 8001e4a:	f7fe fed9 	bl	8000c00 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e54:	4611      	mov	r1, r2
 8001e56:	f7fe fed3 	bl	8000c00 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_MspInit+0x9c>)
 8001e5c:	6853      	ldr	r3, [r2, #4]
 8001e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e66:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	b003      	add	sp, #12
 8001e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000

08001e78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e78:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001e7a:	6802      	ldr	r2, [r0, #0]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_ADC_MspInit+0x70>)
{
 8001e7e:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8001e80:	429a      	cmp	r2, r3
{
 8001e82:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8001e84:	d12d      	bne.n	8001ee2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e86:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001e8a:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <HAL_ADC_MspInit+0x74>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e92:	619a      	str	r2, [r3, #24]
 8001e94:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f7ff f818 	bl	8000edc <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eac:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8001eae:	4c10      	ldr	r4, [pc, #64]	; (8001ef0 <HAL_ADC_MspInit+0x78>)
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_ADC_MspInit+0x7c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb8:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8001ebe:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ec0:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec2:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec4:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec6:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec8:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ecc:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ece:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed0:	f7fe fefe 	bl	8000cd0 <HAL_DMA_Init>
 8001ed4:	b118      	cbz	r0, 8001ede <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001ed6:	217a      	movs	r1, #122	; 0x7a
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <HAL_ADC_MspInit+0x80>)
 8001eda:	f7ff ff7b 	bl	8001dd4 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ede:	622c      	str	r4, [r5, #32]
 8001ee0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee2:	b007      	add	sp, #28
 8001ee4:	bd30      	pop	{r4, r5, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012400 	.word	0x40012400
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	200000ec 	.word	0x200000ec
 8001ef4:	40020008 	.word	0x40020008
 8001ef8:	080020ec 	.word	0x080020ec

08001efc <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <HAL_TIM_PWM_MspInit+0x40>)
{
 8001f00:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10b      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_TIM_PWM_MspInit+0x44>)
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	f042 0202 	orr.w	r2, r2, #2
 8001f0e:	61da      	str	r2, [r3, #28]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f1a:	b002      	add	sp, #8
 8001f1c:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_TIM_PWM_MspInit+0x48>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d1fa      	bne.n	8001f1a <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_TIM_PWM_MspInit+0x44>)
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	f042 0204 	orr.w	r2, r2, #4
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	9b01      	ldr	r3, [sp, #4]
}
 8001f38:	e7ef      	b.n	8001f1a <HAL_TIM_PWM_MspInit+0x1e>
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40000800 	.word	0x40000800

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_TIM_MspPostInit+0x50>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d114      	bne.n	8001f7c <HAL_TIM_MspPostInit+0x34>
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f52:	2333      	movs	r3, #51	; 0x33
 8001f54:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	4669      	mov	r1, sp
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f7fe ffbc 	bl	8000edc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_TIM_MspPostInit+0x58>)
 8001f66:	6853      	ldr	r3, [r2, #4]
 8001f68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f74:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f76:	b005      	add	sp, #20
 8001f78:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_TIM_MspPostInit+0x5c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d1f9      	bne.n	8001f76 <HAL_TIM_MspPostInit+0x2e>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f82:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f86:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	4669      	mov	r1, sp
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f7fe ffa3 	bl	8000edc <HAL_GPIO_Init>
}
 8001f96:	e7ee      	b.n	8001f76 <HAL_TIM_MspPostInit+0x2e>
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40000800 	.word	0x40000800

08001fa8 <NMI_Handler>:
 8001fa8:	4770      	bx	lr

08001faa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler>

08001fac <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler>

08001fae <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler>

08001fb0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler>

08001fb2 <SVC_Handler>:
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fba:	f7fe fb5b 	bl	8000674 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001fc2:	f7fe be80 	b.w	8000cc6 <HAL_SYSTICK_IRQHandler>
	...

08001fc8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc8:	4801      	ldr	r0, [pc, #4]	; (8001fd0 <DMA1_Channel1_IRQHandler+0x8>)
 8001fca:	f7fe bef3 	b.w	8000db4 <HAL_DMA_IRQHandler>
 8001fce:	bf00      	nop
 8001fd0:	200000ec 	.word	0x200000ec

08001fd4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <SystemInit+0x40>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <SystemInit+0x44>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002000:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002002:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002006:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <SystemInit+0x48>)
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	f8ff0000 	.word	0xf8ff0000
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002020:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002022:	e003      	b.n	800202c <LoopCopyDataInit>

08002024 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002026:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002028:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800202a:	3104      	adds	r1, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800202c:	480a      	ldr	r0, [pc, #40]	; (8002058 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002030:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002032:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002034:	d3f6      	bcc.n	8002024 <CopyDataInit>
  ldr r2, =_sbss
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002038:	e002      	b.n	8002040 <LoopFillZerobss>

0800203a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800203c:	f842 3b04 	str.w	r3, [r2], #4

08002040 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002042:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002044:	d3f9      	bcc.n	800203a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002046:	f7ff ffc5 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f000 f80f 	bl	800206c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204e:	f7ff fd85 	bl	8001b5c <main>
  bx lr
 8002052:	4770      	bx	lr
  ldr r3, =_sidata
 8002054:	08002128 	.word	0x08002128
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800205c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002060:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002064:	20000150 	.word	0x20000150

08002068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC1_2_IRQHandler>
	...

0800206c <__libc_init_array>:
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	2500      	movs	r5, #0
 8002070:	4e0c      	ldr	r6, [pc, #48]	; (80020a4 <__libc_init_array+0x38>)
 8002072:	4c0d      	ldr	r4, [pc, #52]	; (80020a8 <__libc_init_array+0x3c>)
 8002074:	1ba4      	subs	r4, r4, r6
 8002076:	10a4      	asrs	r4, r4, #2
 8002078:	42a5      	cmp	r5, r4
 800207a:	d109      	bne.n	8002090 <__libc_init_array+0x24>
 800207c:	f000 f81a 	bl	80020b4 <_init>
 8002080:	2500      	movs	r5, #0
 8002082:	4e0a      	ldr	r6, [pc, #40]	; (80020ac <__libc_init_array+0x40>)
 8002084:	4c0a      	ldr	r4, [pc, #40]	; (80020b0 <__libc_init_array+0x44>)
 8002086:	1ba4      	subs	r4, r4, r6
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	42a5      	cmp	r5, r4
 800208c:	d105      	bne.n	800209a <__libc_init_array+0x2e>
 800208e:	bd70      	pop	{r4, r5, r6, pc}
 8002090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002094:	4798      	blx	r3
 8002096:	3501      	adds	r5, #1
 8002098:	e7ee      	b.n	8002078 <__libc_init_array+0xc>
 800209a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800209e:	4798      	blx	r3
 80020a0:	3501      	adds	r5, #1
 80020a2:	e7f2      	b.n	800208a <__libc_init_array+0x1e>
 80020a4:	08002120 	.word	0x08002120
 80020a8:	08002120 	.word	0x08002120
 80020ac:	08002120 	.word	0x08002120
 80020b0:	08002124 	.word	0x08002124

080020b4 <_init>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	bf00      	nop
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr

080020c0 <_fini>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	bf00      	nop
 80020c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c6:	bc08      	pop	{r3}
 80020c8:	469e      	mov	lr, r3
 80020ca:	4770      	bx	lr
